# Network Payloads & Feature Extraction

## Data Collection Commands (Actual Implementation)

| Layer | Packet / Payload | Tool / Command | Features Extracted | Purpose |
| --- | --- | --- | --- | --- |
| **L3 (ICMP)** | ICMP Echo Request (56 bytes) | `ping -c 5 <IP>` | `avg_latency`, `packet_loss`, `ttl_return`, `icmp_reachable` | Measure baseline network behavior |
|  | ICMP Echo Request (1400 bytes) | `ping -c 5 -s 1400 <IP>` | `packet_loss` (updated if higher) | Detect large packet dropping |
| **L4 (TCP)** | TCP SYN scan (ports 1-1024) | `nmap -sS -p 1-1024 <IP> -oN -` | `filtered_ports_count`, `scan_time` | Identify port filtering patterns |
|  | TCP SYN to port 80 (5 packets) | `hping3 -S -p 80 -c 5 <IP>` | `syn_ack_ratio` (0.0-1.0) | Detect SYN/ACK response ratio |
|  | TCP SYN to port 22 (5 packets) | `hping3 -S -p 22 -c 5 <IP>` | `tcp_reset_ratio` (0.0-1.0) | Detect RST responses vs drops |
| **L7 (HTTP)** | HTTP HEAD request (timing) | `curl -s -I -w '%{time_total}' -o /dev/null --max-time 5 http://<IP>` | `response_time` (ms) | Measure HTTP latency |
|  | HTTP HEAD with custom header | `curl -s -I -H "X-AIFW-Test: 1" --max-time 5 http://<IP>` | `header_modified` (0/1) | Detect proxy headers |
|  | Proxy port testing (3128, 8080, 8888) | `curl -s -I -x http://<IP>:<port> http://example.com --connect-timeout 3` | `header_modified` (0/1) | Auto-detect proxy on common ports |

## Proxy Header Indicators
Detection checks for these headers in HTTP responses:
- `via:`
- `x-squid`
- `cache-status:`
- `x-cache`
- `x-forwarded`
- `squid`

## Timeout Settings
- **ping**: 10 seconds
- **nmap**: 120 seconds (full 1-1024 port scan)
- **hping3**: 10 seconds per test
- **curl**: 5-10 seconds depending on operation

## Requirements
- **Root/sudo access** required for: `nmap -sS` and `hping3`
- Alternative: `sudo setcap cap_net_raw+ep $(which hping3)` to run without sudo

## Output Format
All features are collected into CSV format with columns:
```
timestamp,host,avg_latency,packet_loss,ttl_return,icmp_reachable,
filtered_ports_count,scan_time,syn_ack_ratio,tcp_reset_ratio,
response_time,header_modified,firewall_label
```

## Feature Collection Example
```bash
# Collect features from 4 VMs, 10 samples each
python src/data_collector.py \
  --targets 192.168.56.10 192.168.56.11 192.168.56.12 192.168.56.13 \
  --repeat 10 \
  --output dataset.csv
```
